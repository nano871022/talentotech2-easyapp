# Script para verificar que la correcci√≥n de copia funciona correctamente

Write-Host "=== Diagn√≥stico de Correcci√≥n de Copia en Dockerfiles ===" -ForegroundColor Cyan

function Test-DockerfilesCopyFix {
    Write-Host "`nüîß Probando correcci√≥n de copia en Dockerfiles..." -ForegroundColor Yellow
    
    # Verificar que los Dockerfiles tienen la correcci√≥n
    Write-Host "`n1. üìã Verificando sintaxis corregida en Dockerfiles:" -ForegroundColor Cyan
    
    $authContent = Get-Content "backend\auth.Dockerfile" -Raw
    $adviseContent = Get-Content "backend\advise.Dockerfile" -Raw
    
    if ($authContent -match "cp -r /build/\. /var/www/") {
        Write-Host "   ‚úÖ auth.Dockerfile - Correcci√≥n aplicada" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå auth.Dockerfile - A√∫n usa sintaxis problem√°tica" -ForegroundColor Red
        return $false
    }
    
    if ($adviseContent -match "cp -r /build/\. /var/www/") {
        Write-Host "   ‚úÖ advise.Dockerfile - Correcci√≥n aplicada" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå advise.Dockerfile - A√∫n usa sintaxis problem√°tica" -ForegroundColor Red
        return $false
    }
    
    return $true
}

function Test-ServiceContainerStructure {
    param([string]$ServiceName)
    
    Write-Host "`nüîç Verificando estructura en contenedor $ServiceName..." -ForegroundColor Cyan
    
    try {
        # Verificar que el contenedor existe y est√° corriendo
        $containerStatus = docker ps --filter "name=$ServiceName" --format "{{.Status}}" 2>$null
        if (-not $containerStatus -or $containerStatus -notmatch "Up") {
            Write-Host "   ‚ö†Ô∏è  Contenedor $ServiceName no est√° corriendo" -ForegroundColor Yellow
            return $false
        }
        
        # Verificar directorio principal
        $mainDir = docker exec $ServiceName ls -la /var/www/ 2>$null
        if ($mainDir) {
            Write-Host "   ‚úÖ /var/www/ accesible" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå /var/www/ no accesible" -ForegroundColor Red
            return $false
        }
        
        # Verificar app/core existe
        $coreDir = docker exec $ServiceName test -d /var/www/app/core 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Host "   ‚úÖ /var/www/app/core/ directorio existe" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå /var/www/app/core/ directorio NO existe" -ForegroundColor Red
            return $false
        }
        
        # Verificar Database.php espec√≠ficamente
        $databaseFile = docker exec $ServiceName test -f /var/www/app/core/Database.php 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Host "   ‚úÖ Database.php encontrado" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå Database.php NO encontrado" -ForegroundColor Red
            return $false
        }
        
        # Verificar contenido de Database.php
        $dbContent = docker exec $ServiceName head -2 /var/www/app/core/Database.php 2>$null
        if ($dbContent -match "<?php") {
            Write-Host "   ‚úÖ Database.php tiene contenido v√°lido" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå Database.php sin contenido v√°lido" -ForegroundColor Red
            return $false
        }
        
        # Verificar que build directory fue limpiado
        $buildDir = docker exec $ServiceName test -d /build 2>$null
        if ($LASTEXITCODE -ne 0) {
            Write-Host "   ‚úÖ Directorio /build correctamente eliminado" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è  Directorio /build a√∫n existe (deber√≠a estar eliminado)" -ForegroundColor Yellow
        }
        
        return $true
        
    } catch {
        Write-Host "   ‚ùå Error verificando $ServiceName : $_" -ForegroundColor Red
        return $false
    }
}

function Start-BuildAndTest {
    Write-Host "`nüèóÔ∏è  Reconstruyendo servicios para probar correcci√≥n..." -ForegroundColor Yellow
    
    try {
        # Detener servicios existentes
        Write-Host "   Deteniendo servicios existentes..." -ForegroundColor Cyan
        docker-compose down 2>$null
        
        # Reconstruir servicios
        Write-Host "   Reconstruyendo servicios..." -ForegroundColor Cyan
        $buildResult = docker-compose up --build -d 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "   ‚úÖ Servicios reconstruidos exitosamente" -ForegroundColor Green
            
            # Esperar a que se inicien
            Write-Host "   Esperando que los servicios se inicien..." -ForegroundColor Cyan
            Start-Sleep -Seconds 15
            
            return $true
        } else {
            Write-Host "   ‚ùå Error en reconstrucci√≥n:" -ForegroundColor Red
            Write-Host $buildResult -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "   ‚ùå Error en build: $_" -ForegroundColor Red
        return $false
    }
}

function Main {
    Write-Host "Iniciando diagn√≥stico de correcci√≥n de copia...`n" -ForegroundColor White
    
    # Paso 1: Verificar que la correcci√≥n est√° en los Dockerfiles
    if (-not (Test-DockerfilesCopyFix)) {
        Write-Host "`n‚ùå Los Dockerfiles no tienen la correcci√≥n aplicada" -ForegroundColor Red
        return
    }
    
    # Paso 2: Verificar Docker disponible
    try {
        docker --version > $null
        Write-Host "`n‚úÖ Docker disponible" -ForegroundColor Green
    } catch {
        Write-Host "`n‚ùå Docker no disponible" -ForegroundColor Red
        return
    }
    
    # Paso 3: Reconstruir servicios
    if (-not (Start-BuildAndTest)) {
        Write-Host "`n‚ùå Error en reconstrucci√≥n de servicios" -ForegroundColor Red
        return
    }
    
    # Paso 4: Verificar estructura en contenedores
    $authOk = Test-ServiceContainerStructure "auth-service"
    $adviseOk = Test-ServiceContainerStructure "advise-service" 
    
    # Resultado final
    Write-Host "`n=== RESULTADO FINAL ===" -ForegroundColor Cyan
    if ($authOk -and $adviseOk) {
        Write-Host "üéâ ¬°CORRECCI√ìN EXITOSA!" -ForegroundColor Green
        Write-Host "   ‚Ä¢ app/core/ se copia correctamente" -ForegroundColor Green
        Write-Host "   ‚Ä¢ Database.php est√° disponible en ambos servicios" -ForegroundColor Green
        Write-Host "   ‚Ä¢ Limpieza de directorio temporal funciona" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  CORRECCI√ìN PARCIAL" -ForegroundColor Yellow
        Write-Host "   ‚Ä¢ Algunos servicios pueden tener problemas" -ForegroundColor Yellow
        Write-Host "   ‚Ä¢ Verificar logs: docker-compose logs [service-name]" -ForegroundColor Yellow
    }
    
    Write-Host "`nüìã Comandos √∫tiles para debug adicional:" -ForegroundColor Cyan
    Write-Host "   docker exec -it auth-service ls -la /var/www/app/core/" -ForegroundColor White
    Write-Host "   docker exec -it advise-service ls -la /var/www/app/core/" -ForegroundColor White
    Write-Host "   docker-compose logs auth-service" -ForegroundColor White
    Write-Host "   docker-compose logs advise-service" -ForegroundColor White
}

# Ejecutar diagn√≥stico
Main